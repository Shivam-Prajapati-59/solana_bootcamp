/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  containsBytes,
  fixEncoderSize,
  getBytesEncoder,
  type Address,
  type ReadonlyUint8Array,
} from 'gill';
import {
  type ParsedCreateJournalEntryInstruction,
  type ParsedDeleteJournalEntryInstruction,
  type ParsedUpdateJournalEntryInstruction,
} from '../instructions';

export const CRUDAPP_PROGRAM_ADDRESS =
  'JAVuBXeBZqXNtS73azhBDAoYaaAFfo4gWXoZe2e7Jf8H' as Address<'JAVuBXeBZqXNtS73azhBDAoYaaAFfo4gWXoZe2e7Jf8H'>;

export enum CrudappAccount {
  JournalEntryState,
}

export function identifyCrudappAccount(
  account: { data: ReadonlyUint8Array } | ReadonlyUint8Array
): CrudappAccount {
  const data = 'data' in account ? account.data : account;
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([113, 86, 110, 124, 140, 14, 58, 66])
      ),
      0
    )
  ) {
    return CrudappAccount.JournalEntryState;
  }
  throw new Error(
    'The provided account could not be identified as a crudapp account.'
  );
}

export enum CrudappInstruction {
  CreateJournalEntry,
  DeleteJournalEntry,
  UpdateJournalEntry,
}

export function identifyCrudappInstruction(
  instruction: { data: ReadonlyUint8Array } | ReadonlyUint8Array
): CrudappInstruction {
  const data = 'data' in instruction ? instruction.data : instruction;
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([48, 65, 201, 186, 25, 41, 127, 0])
      ),
      0
    )
  ) {
    return CrudappInstruction.CreateJournalEntry;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([156, 50, 93, 5, 157, 97, 188, 114])
      ),
      0
    )
  ) {
    return CrudappInstruction.DeleteJournalEntry;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([113, 164, 49, 62, 43, 83, 194, 172])
      ),
      0
    )
  ) {
    return CrudappInstruction.UpdateJournalEntry;
  }
  throw new Error(
    'The provided instruction could not be identified as a crudapp instruction.'
  );
}

export type ParsedCrudappInstruction<
  TProgram extends string = 'JAVuBXeBZqXNtS73azhBDAoYaaAFfo4gWXoZe2e7Jf8H',
> =
  | ({
      instructionType: CrudappInstruction.CreateJournalEntry;
    } & ParsedCreateJournalEntryInstruction<TProgram>)
  | ({
      instructionType: CrudappInstruction.DeleteJournalEntry;
    } & ParsedDeleteJournalEntryInstruction<TProgram>)
  | ({
      instructionType: CrudappInstruction.UpdateJournalEntry;
    } & ParsedUpdateJournalEntryInstruction<TProgram>);
